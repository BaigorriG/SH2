library ieee; 
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

ENTITY GENERADOR_PAREDES IS
	PORT(
		CLK		:	IN	STD_LOGIC;
		RAND		:	IN	STD_LOGIC_VECTOR(63 DOWNTO 0);
		MANTIENE	:	IN	STD_LOGIC;
		ADDR		:	IN	STD_LOGIC_VECTOR(5 DOWNTO 0);
		DATA		:	OUT	STD_LOGIC_VECTOR(5 DOWNTO 0)
	);
END ENTITY;
		
ARCHITECTURE BEH OF GENERADOR_PAREDES IS

TYPE RAND_2D	IS ARRAY(0 TO 63) OF STD_LOGIC_VECTOR(5 DOWNTO 0);
TYPE LABE_2D	IS ARRAY(0 TO 127) OF STD_LOGIC_VECTOR(5 DOWNTO 0);

SIGNAL RANDH			:	STD_LOGIC_VECTOR(63 DOWNTO 0);
SIGNAL PAREDES_RAND	:	RAND_2D;
SIGNAL PAREDES_ALT	:	RAND_2D;
SIGNAL PAREDES_LABE	:	LABE_2D;

BEGIN
MANTIENERAND:PROCESS(CLK,MANTIENE)
BEGIN
	IF RISING_EDGE(CLK) THEN
		IF (MANTIENE='0') THEN
			RANDH	<= RAND;
		END IF;
	END IF;
END PROCESS;

PROCESS (ADDR, RANDH)
VARIABLE INDICE:	STD_LOGIC_VECTOR(6 DOWNTO 0);
BEGIN
	CASE ADDR(5 DOWNTO 4) IS
		WHEN "00" =>
				INDICE:="0" & RANDH(1 DOWNTO 0) & ADDR(3 DOWNTO 0);
				DATA <= PAREDES_RAND(TO_INTEGER(UNSIGNED(INDICE)));
		WHEN "01" =>
				INDICE:="0" & RANDH(3 DOWNTO 2) & ADDR(3 DOWNTO 0);
				DATA <= PAREDES_ALT(TO_INTEGER(UNSIGNED(INDICE)));
		WHEN "10" =>
				INDICE:="0" & RANDH(5 DOWNTO 4) & ADDR(3 DOWNTO 0);
				DATA <= PAREDES_RAND(TO_INTEGER(UNSIGNED(INDICE)));
		WHEN "11" =>
				INDICE:=RANDH(8 DOWNTO 6) & ADDR(3 DOWNTO 0);
				DATA <= PAREDES_RAND(TO_INTEGER(UNSIGNED(INDICE)));
	END CASE;
END PROCESS;

PAREDES_RAND(0)<="101010";

PAREDES_RAND(1)<="000000";

PAREDES_RAND(2)<="010101";

PAREDES_RAND(3)<="000000";

PAREDES_RAND(4)<="101010";

PAREDES_RAND(5)<="000000";

PAREDES_RAND(6)<="010101";

PAREDES_RAND(7)<="000000";

PAREDES_RAND(8)<="101010";

PAREDES_RAND(9)<="000000";

PAREDES_RAND(10)<="010101";

PAREDES_RAND(11)<="000000";

PAREDES_RAND(12)<="101010";

PAREDES_RAND(13)<="000000";

PAREDES_RAND(14)<="000000";

PAREDES_RAND(15)<="000000";




PAREDES_RAND(16)<="010101";

PAREDES_RAND(17)<="000000";

PAREDES_RAND(18)<="101010";

PAREDES_RAND(19)<="000000";

PAREDES_RAND(20)<="010101";

PAREDES_RAND(21)<="000000";

PAREDES_RAND(22)<="101010";

PAREDES_RAND(23)<="000000";

PAREDES_RAND(24)<="010101";

PAREDES_RAND(25)<="000000";

PAREDES_RAND(26)<="101010";

PAREDES_RAND(27)<="000000";

PAREDES_RAND(28)<="010101";

PAREDES_RAND(29)<="000000";

PAREDES_RAND(30)<="000000";

PAREDES_RAND(31)<="000000";




PAREDES_RAND(32)<="101010";

PAREDES_RAND(33)<="000000";

PAREDES_RAND(34)<="000000";

PAREDES_RAND(35)<="010101";

PAREDES_RAND(36)<="000000";

PAREDES_RAND(37)<="000000";

PAREDES_RAND(38)<="101110";

PAREDES_RAND(39)<="000000";

PAREDES_RAND(40)<="000000";

PAREDES_RAND(41)<="011011";

PAREDES_RAND(42)<="000000";

PAREDES_RAND(43)<="000000";

PAREDES_RAND(44)<="010101";

PAREDES_RAND(45)<="000000";

PAREDES_RAND(46)<="000000";

PAREDES_RAND(47)<="000000";




PAREDES_RAND(48)<="010101";

PAREDES_RAND(49)<="000000";

PAREDES_RAND(50)<="000000";

PAREDES_RAND(51)<="101010";

PAREDES_RAND(52)<="000000";

PAREDES_RAND(53)<="000000";

PAREDES_RAND(54)<="111010";

PAREDES_RAND(55)<="000000";

PAREDES_RAND(56)<="000000";

PAREDES_RAND(57)<="101101";

PAREDES_RAND(58)<="000000";

PAREDES_RAND(59)<="000000";

PAREDES_RAND(60)<="101010";

PAREDES_RAND(61)<="000000";

PAREDES_RAND(62)<="000000";

PAREDES_RAND(63)<="000000";




PAREDES_ALT(0)<="011111";

PAREDES_ALT(1)<="000000";

PAREDES_ALT(2)<="000000";

PAREDES_ALT(3)<="000000";

PAREDES_ALT(4)<="111011";

PAREDES_ALT(5)<="000000";

PAREDES_ALT(6)<="000000";

PAREDES_ALT(7)<="000000";

PAREDES_ALT(8)<="011111";

PAREDES_ALT(9)<="000000";

PAREDES_ALT(10)<="000000";

PAREDES_ALT(11)<="000000";

PAREDES_ALT(12)<="111011";

PAREDES_ALT(13)<="000000";

PAREDES_ALT(14)<="000000";

PAREDES_ALT(15)<="000000";




PAREDES_ALT(16)<="110111";

PAREDES_ALT(17)<="000000";

PAREDES_ALT(18)<="000000";

PAREDES_ALT(19)<="000000";

PAREDES_ALT(20)<="111110";

PAREDES_ALT(21)<="000000";

PAREDES_ALT(22)<="000000";

PAREDES_ALT(23)<="000000";

PAREDES_ALT(24)<="110111";

PAREDES_ALT(25)<="000000";

PAREDES_ALT(26)<="000000";

PAREDES_ALT(27)<="000000";


END ARCHITECTURE;